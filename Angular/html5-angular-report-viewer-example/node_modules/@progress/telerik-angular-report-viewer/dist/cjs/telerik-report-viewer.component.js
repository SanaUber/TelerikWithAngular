"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelerikReportViewerComponent = void 0;
const core_1 = require("@angular/core");
require("../dependencies/initExtDeps");
const telerikReportViewer_1 = require("../dependencies/telerikReportViewer");
const i0 = require("@angular/core");
const i1 = require("@angular/common");
const _c0 = ["container"];
class TelerikReportViewerComponent {
    ngOnInit() {
        this.reportViewerID = this.id || "reportViewer1";
        this.keepClientAlive = this.keepClientAlive === undefined ? true : this.keepClientAlive;
    }
    ngAfterViewInit() {
        this.viewerObject = new telerikReportViewer_1.ReportViewer(this.container.nativeElement, {
            id: this.reportViewerID,
            serviceUrl: this.serviceUrl,
            reportServer: this.reportServer,
            trvTemplateUrl: this.templateUrl,
            initialPageAreaImageUrl: this.initialPageAreaImageUrl,
            reportSource: this.reportSource,
            sendEmail: this.sendEmail,
            scale: this.scale,
            scaleMode: this.scaleMode,
            viewMode: this.viewMode,
            pageMode: this.pageMode,
            parameters: this.parameters,
            persistSession: this.persistSession,
            parameterEditors: this.parameterEditors,
            authenticationToken: this.authenticationToken,
            ready: this.ready,
            printMode: this.printMode,
            selector: this.selector,
            disabledButtonClass: this.disabledButtonClass,
            checkedButtonClass: this.checkedButtonClass,
            exportBegin: this.exportBegin,
            exportEnd: this.exportEnd,
            printBegin: this.printBegin,
            printEnd: this.printEnd,
            renderingBegin: this.renderingBegin,
            renderingEnd: this.renderingEnd,
            sendEmailBegin: this.sendEmailBegin,
            sendEmailEnd: this.sendEmailEnd,
            updateUi: this.updateUi,
            pageReady: this.pageReady,
            error: this.error,
            interactiveActionExecuting: this.interactiveActionExecuting,
            interactiveActionEnter: this.interactiveActionEnter,
            interactiveActionLeave: this.interactiveActionLeave,
            viewerToolTipOpening: this.viewerToolTipOpening,
            enableAccessibility: this.enableAccessibility,
            searchMetadataOnDemand: this.searchMetadataOnDemand,
            parametersAreaVisible: this.parametersAreaVisible,
            documentMapVisible: this.documentMapVisible,
            documentMapAreaPosition: this.documentMapAreaPosition,
            parametersAreaPosition: this.parametersAreaPosition,
            keepClientAlive: this.keepClientAlive
        });
        this.commands = this.viewerObject.commands;
    }
    ngOnDestroy() {
        this.viewerObject.dispose();
    }
    refreshReport() { return this.viewerObject.refreshReport(); }
    getReportSource() { return this.viewerObject.reportSource(); }
    setReportSource(rs) { return this.viewerObject.reportSource(rs); }
    getViewMode() { return this.viewerObject.viewMode(); }
    setViewMode(vm) { return this.viewerObject.viewMode(vm); }
    getScale() { return this.viewerObject.scale(); }
    setScale(scale) { return this.viewerObject.scale(scale); }
    pageCount() { return this.viewerObject.pageCount(); }
    currentPage() { return this.viewerObject.currentPage(); }
    setAuthenticationToken(token) { return this.viewerObject.authenticationToken(token); }
    getAccessibilityKeyMap() { return this.viewerObject.accessibilityKeyMap(); }
    setAccessibilityKeyMap(keyMap) { return this.viewerObject.accessibilityKeyMap(keyMap); }
    bind(eventName, eventHandler) { this.viewerObject.bind(eventName, eventHandler); }
    unbind(eventName, eventHandler) { this.viewerObject.unbind(eventName, eventHandler); }
    unbindAll(eventName) { this.viewerObject.unbind(eventName); }
    getPageMode() { return this.viewerObject.pageMode(); }
    setPageMode(psm) { return this.viewerObject.pageMode(psm); }
    clearReportSource() { return this.viewerObject.clearReportSource(); }
    dispose() { this.viewerObject.dispose(); }
    getReportParameters() { return this.viewerObject.getReportParameters(); }
}
exports.TelerikReportViewerComponent = TelerikReportViewerComponent;
TelerikReportViewerComponent.ɵfac = function TelerikReportViewerComponent_Factory(t) { return new (t || TelerikReportViewerComponent)(); };
TelerikReportViewerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TelerikReportViewerComponent, selectors: [["tr-viewer"]], viewQuery: function TelerikReportViewerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { id: "id", serviceUrl: "serviceUrl", reportServer: "reportServer", templateUrl: "templateUrl", initialPageAreaImageUrl: "initialPageAreaImageUrl", reportSource: "reportSource", sendEmail: "sendEmail", parameters: "parameters", scale: "scale", scaleMode: "scaleMode", viewMode: "viewMode", pageMode: "pageMode", persistSession: "persistSession", parameterEditors: "parameterEditors", authenticationToken: "authenticationToken", printMode: "printMode", selector: "selector", disabledButtonClass: "disabledButtonClass", checkedButtonClass: "checkedButtonClass", enableAccessibility: "enableAccessibility", searchMetadataOnDemand: "searchMetadataOnDemand", parametersAreaVisible: "parametersAreaVisible", documentMapVisible: "documentMapVisible", ready: "ready", error: "error", parametersAreaPosition: "parametersAreaPosition", documentMapAreaPosition: "documentMapAreaPosition", exportBegin: "exportBegin", exportEnd: "exportEnd", sendEmailBegin: "sendEmailBegin", sendEmailEnd: "sendEmailEnd", pageReady: "pageReady", printBegin: "printBegin", printEnd: "printEnd", renderingBegin: "renderingBegin", renderingEnd: "renderingEnd", updateUi: "updateUi", interactiveActionExecuting: "interactiveActionExecuting", interactiveActionEnter: "interactiveActionEnter", interactiveActionLeave: "interactiveActionLeave", viewerToolTipOpening: "viewerToolTipOpening", keepClientAlive: "keepClientAlive", containerStyle: "containerStyle" }, decls: 3, vars: 2, consts: [[3, "ngStyle"], ["container", ""]], template: function TelerikReportViewerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "Loading Report Viewer...");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("ngStyle", ctx.containerStyle);
        i0.ɵɵattribute("id", ctx.reportViewerID);
    } }, dependencies: [i1.NgStyle], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(TelerikReportViewerComponent, [{
        type: core_1.Component,
        args: [{ selector: 'tr-viewer', template: '<div [ngStyle]="containerStyle" [attr.id]="reportViewerID" #container>Loading Report Viewer...</div>', encapsulation: core_1.ViewEncapsulation.None }]
    }], null, { id: [{
            type: core_1.Input
        }], serviceUrl: [{
            type: core_1.Input
        }], reportServer: [{
            type: core_1.Input
        }], templateUrl: [{
            type: core_1.Input
        }], initialPageAreaImageUrl: [{
            type: core_1.Input
        }], reportSource: [{
            type: core_1.Input
        }], sendEmail: [{
            type: core_1.Input
        }], parameters: [{
            type: core_1.Input
        }], scale: [{
            type: core_1.Input
        }], scaleMode: [{
            type: core_1.Input
        }], viewMode: [{
            type: core_1.Input
        }], pageMode: [{
            type: core_1.Input
        }], persistSession: [{
            type: core_1.Input
        }], parameterEditors: [{
            type: core_1.Input
        }], authenticationToken: [{
            type: core_1.Input
        }], printMode: [{
            type: core_1.Input
        }], selector: [{
            type: core_1.Input
        }], disabledButtonClass: [{
            type: core_1.Input
        }], checkedButtonClass: [{
            type: core_1.Input
        }], enableAccessibility: [{
            type: core_1.Input
        }], searchMetadataOnDemand: [{
            type: core_1.Input
        }], parametersAreaVisible: [{
            type: core_1.Input
        }], documentMapVisible: [{
            type: core_1.Input
        }], ready: [{
            type: core_1.Input
        }], error: [{
            type: core_1.Input
        }], parametersAreaPosition: [{
            type: core_1.Input
        }], documentMapAreaPosition: [{
            type: core_1.Input
        }], exportBegin: [{
            type: core_1.Input
        }], exportEnd: [{
            type: core_1.Input
        }], sendEmailBegin: [{
            type: core_1.Input
        }], sendEmailEnd: [{
            type: core_1.Input
        }], pageReady: [{
            type: core_1.Input
        }], printBegin: [{
            type: core_1.Input
        }], printEnd: [{
            type: core_1.Input
        }], renderingBegin: [{
            type: core_1.Input
        }], renderingEnd: [{
            type: core_1.Input
        }], updateUi: [{
            type: core_1.Input
        }], interactiveActionExecuting: [{
            type: core_1.Input
        }], interactiveActionEnter: [{
            type: core_1.Input
        }], interactiveActionLeave: [{
            type: core_1.Input
        }], viewerToolTipOpening: [{
            type: core_1.Input
        }], keepClientAlive: [{
            type: core_1.Input
        }], container: [{
            type: core_1.ViewChild,
            args: ['container']
        }], containerStyle: [{
            type: core_1.Input
        }] }); })();
//# sourceMappingURL=telerik-report-viewer.component.js.map