import { AfterViewInit, OnDestroy } from '@angular/core';
import '../dependencies/initExtDeps';
import * as i0 from "@angular/core";
export declare class TelerikReportViewerComponent implements AfterViewInit, OnDestroy {
    containerId: string;
    id: string;
    serviceUrl: string;
    reportServer: any;
    templateUrl: string;
    initialPageAreaImageUrl: string;
    reportSource: any;
    sendEmail: any;
    parameters: any;
    scale: number;
    scaleMode: string;
    viewMode: string;
    pageMode: string;
    persistSession: boolean;
    parameterEditors: Array<any>;
    authenticationToken: string;
    printMode: string;
    selector: string;
    disabledButtonClass: string;
    checkedButtonClass: string;
    enableAccessibility: boolean;
    searchMetadataOnDemand: boolean;
    parametersAreaVisible: boolean;
    documentMapVisible: boolean;
    ready: Function;
    error: Function;
    parametersAreaPosition: string;
    documentMapAreaPosition: string;
    exportBegin: Function;
    exportEnd: Function;
    sendEmailBegin: Function;
    sendEmailEnd: Function;
    pageReady: Function;
    printBegin: Function;
    printEnd: Function;
    renderingBegin: Function;
    renderingEnd: Function;
    updateUi: Function;
    interactiveActionExecuting: Function;
    interactiveActionEnter: Function;
    interactiveActionLeave: Function;
    viewerToolTipOpening: Function;
    keepClientAlive: boolean;
    commands: any;
    container: any;
    containerStyle: any;
    viewerObject: any;
    reportViewerID: string;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    refreshReport(): any;
    getReportSource(): any;
    setReportSource(rs: any): any;
    getViewMode(): string;
    setViewMode(vm: string): any;
    getScale(): any;
    setScale(scale: any): any;
    pageCount(): number;
    currentPage(): number;
    setAuthenticationToken(token: string): any;
    getAccessibilityKeyMap(): any;
    setAccessibilityKeyMap(keyMap: any): any;
    bind(eventName: string, eventHandler: Function): void;
    unbind(eventName: string, eventHandler: Function): void;
    unbindAll(eventName: string): void;
    getPageMode(): string;
    setPageMode(psm: string): any;
    clearReportSource(): any;
    dispose(): void;
    getReportParameters(): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<TelerikReportViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TelerikReportViewerComponent, "tr-viewer", never, { "id": { "alias": "id"; "required": false; }; "serviceUrl": { "alias": "serviceUrl"; "required": false; }; "reportServer": { "alias": "reportServer"; "required": false; }; "templateUrl": { "alias": "templateUrl"; "required": false; }; "initialPageAreaImageUrl": { "alias": "initialPageAreaImageUrl"; "required": false; }; "reportSource": { "alias": "reportSource"; "required": false; }; "sendEmail": { "alias": "sendEmail"; "required": false; }; "parameters": { "alias": "parameters"; "required": false; }; "scale": { "alias": "scale"; "required": false; }; "scaleMode": { "alias": "scaleMode"; "required": false; }; "viewMode": { "alias": "viewMode"; "required": false; }; "pageMode": { "alias": "pageMode"; "required": false; }; "persistSession": { "alias": "persistSession"; "required": false; }; "parameterEditors": { "alias": "parameterEditors"; "required": false; }; "authenticationToken": { "alias": "authenticationToken"; "required": false; }; "printMode": { "alias": "printMode"; "required": false; }; "selector": { "alias": "selector"; "required": false; }; "disabledButtonClass": { "alias": "disabledButtonClass"; "required": false; }; "checkedButtonClass": { "alias": "checkedButtonClass"; "required": false; }; "enableAccessibility": { "alias": "enableAccessibility"; "required": false; }; "searchMetadataOnDemand": { "alias": "searchMetadataOnDemand"; "required": false; }; "parametersAreaVisible": { "alias": "parametersAreaVisible"; "required": false; }; "documentMapVisible": { "alias": "documentMapVisible"; "required": false; }; "ready": { "alias": "ready"; "required": false; }; "error": { "alias": "error"; "required": false; }; "parametersAreaPosition": { "alias": "parametersAreaPosition"; "required": false; }; "documentMapAreaPosition": { "alias": "documentMapAreaPosition"; "required": false; }; "exportBegin": { "alias": "exportBegin"; "required": false; }; "exportEnd": { "alias": "exportEnd"; "required": false; }; "sendEmailBegin": { "alias": "sendEmailBegin"; "required": false; }; "sendEmailEnd": { "alias": "sendEmailEnd"; "required": false; }; "pageReady": { "alias": "pageReady"; "required": false; }; "printBegin": { "alias": "printBegin"; "required": false; }; "printEnd": { "alias": "printEnd"; "required": false; }; "renderingBegin": { "alias": "renderingBegin"; "required": false; }; "renderingEnd": { "alias": "renderingEnd"; "required": false; }; "updateUi": { "alias": "updateUi"; "required": false; }; "interactiveActionExecuting": { "alias": "interactiveActionExecuting"; "required": false; }; "interactiveActionEnter": { "alias": "interactiveActionEnter"; "required": false; }; "interactiveActionLeave": { "alias": "interactiveActionLeave"; "required": false; }; "viewerToolTipOpening": { "alias": "viewerToolTipOpening"; "required": false; }; "keepClientAlive": { "alias": "keepClientAlive"; "required": false; }; "containerStyle": { "alias": "containerStyle"; "required": false; }; }, {}, never, never, false, never>;
}
